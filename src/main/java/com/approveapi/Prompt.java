/*
 * ApproveAPISwagger
 * The simple API to request a user's approval on anything via email + sms.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@approveapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.approveapi;

import java.util.Objects;
import java.util.Arrays;
import com.approveapi.PromptAnswer;
import com.approveapi.PromptMetadata;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * Prompt
 */

public class Prompt {
  public static final String SERIALIZED_NAME_ANSWER = "answer";
  @SerializedName(SERIALIZED_NAME_ANSWER)
  private PromptAnswer answer = null;

  public static final String SERIALIZED_NAME_SENT_AT = "sent_at";
  @SerializedName(SERIALIZED_NAME_SENT_AT)
  private BigDecimal sentAt;

  public static final String SERIALIZED_NAME_IS_EXPIRED = "is_expired";
  @SerializedName(SERIALIZED_NAME_IS_EXPIRED)
  private Boolean isExpired;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private PromptMetadata metadata = null;

  public Prompt answer(PromptAnswer answer) {
    this.answer = answer;
    return this;
  }

   /**
   * Get answer
   * @return answer
  **/
  @ApiModelProperty(value = "")
  public PromptAnswer getAnswer() {
    return answer;
  }

  public void setAnswer(PromptAnswer answer) {
    this.answer = answer;
  }

  public Prompt sentAt(BigDecimal sentAt) {
    this.sentAt = sentAt;
    return this;
  }

   /**
   * The unix timestamp when this prompt was sent.
   * @return sentAt
  **/
  @ApiModelProperty(required = true, value = "The unix timestamp when this prompt was sent.")
  public BigDecimal getSentAt() {
    return sentAt;
  }

  public void setSentAt(BigDecimal sentAt) {
    this.sentAt = sentAt;
  }

  public Prompt isExpired(Boolean isExpired) {
    this.isExpired = isExpired;
    return this;
  }

   /**
   * Whether the prompt can still be answered.
   * @return isExpired
  **/
  @ApiModelProperty(required = true, value = "Whether the prompt can still be answered.")
  public Boolean getIsExpired() {
    return isExpired;
  }

  public void setIsExpired(Boolean isExpired) {
    this.isExpired = isExpired;
  }

  public Prompt id(String id) {
    this.id = id;
    return this;
  }

   /**
   * A unique id for this prompt.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "A unique id for this prompt.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Prompt metadata(PromptMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @ApiModelProperty(value = "")
  public PromptMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(PromptMetadata metadata) {
    this.metadata = metadata;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Prompt prompt = (Prompt) o;
    return Objects.equals(this.answer, prompt.answer) &&
        Objects.equals(this.sentAt, prompt.sentAt) &&
        Objects.equals(this.isExpired, prompt.isExpired) &&
        Objects.equals(this.id, prompt.id) &&
        Objects.equals(this.metadata, prompt.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answer, sentAt, isExpired, id, metadata);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Prompt {\n");
    sb.append("    answer: ").append(toIndentedString(answer)).append("\n");
    sb.append("    sentAt: ").append(toIndentedString(sentAt)).append("\n");
    sb.append("    isExpired: ").append(toIndentedString(isExpired)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

